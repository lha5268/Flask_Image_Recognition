name: Pylint

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Fail on Errors/Fatals
      run: |
        pylint -E $(git ls-files '*.py')
        
    - name: Analysing the code with pylint
      env:
        THRESHOLD: "8.00"  # set your minimum acceptable score

      run: |
        set -euo pipefail
        FILES="$(git ls-files '*.py')"

        # Run full lint but don't fail on its exit code; we'll decide based on the score.
        REPORT=$(pylint --exit-zero --score=y $FILES | tee pylint_report.txt)

        # Extract "Your code has been rated at X/10" safely
        SCORE=$(printf '%s\n' "$REPORT" \
          | sed -nE 's/.*rated at ([0-9.]+)\/10.*/\1/p' | tail -n1)

        if [ -z "${SCORE:-}" ]; then
          echo "Could not parse Pylint score from output. Last lines:" >&2
          tail -n 10 pylint_report.txt || true
          exit 1
        fi

        echo "Pylint score: $SCORE/10 (threshold: $THRESHOLD)"

        # Compare as floats; exit non-zero if score < threshold
        python -c "import sys; s=float(sys.argv[1]); t=float(sys.argv[2]); raise SystemExit(0 if s>=t else 1)" \
          "$SCORE" "$THRESHOLD"
